#DESCRIPTION

This command can be invoked as `redux redo` or, through a link, as `redo`.

A redo target is produced by an sh script whose name has a '.do' file extension
and, as such, is called a do script.

For a given target named `target`, the corresponding do file may be named,
in order of decreasing specificity, `target.do` or `default.do`.

For a given target named `target.ext`, the corresponding do file may be named,
in order of decreasing specificity, `target.ext.do`, `default.ext.do` or, finally, `default.do`.

For targets with multiple extensions, the corresponding do files may be named,
in order of decreasing specificity, `target.ext.do` where `ext` is the full extension,
followed by default do files with shorter and shorter suffixes of the extension, finally
ending in `default.do`. For example, the target `file.x.y.z` results in a search for
the following do scripts:

  file.x.y.z.do
  default.x.y.z.do
  default.y.z.do
  default.z.do
  default.do

Jumping ahead slightly, note that in the case of multiple extensions, the $2 argument
to the do script contains all but one extension. In the example above, $2 would be `file.x.y` for all do
files. Doing otherwise causes the $2 argument to depend on the do file used.

Redo searches for each of these script files, in order of specificity, starting in the target's directory
and moving into parent directories. The search stops when a script is found or when the project
root directory has been unsuccessfully searched.

In the latter case, if the target file exists on disk, it is taken to be a source file,
not generated by script and its metadata is stored in the database.
The file will be subsequently watched for changes.

In the former case, where the script is found, it is assumed to be an sh script and executed with three arguments:

$1 = path to target, relative to do script directory 
$2 = same as $1, with a single file extension, if any, removed
$3 = temporary file name

The script is executed by the operating system with the current working directory (cwd) set to its directory
and with stdout opened to a temporary file (which is unnamed and different from $3).
It is normally expected to produce output on stdout or write to the file specified by its $3 parameter.
It is an error for a script to write to both outputs.

If the script completes successfully, redo chooses the correct output, renames the temporary file
to the target file and updates its database with the new file's metadata record.
Since only one of the two temporary files can have content, redo has no trouble selecting the correct one.
Conversely, if neither file has content, then either is a valid candidate.

In the do file, which is an sh script, the line 

    redo-ifchange A B C

specifies the files A, B, and C as prerequisites for the target file.

Similarly, a call to 

    redo-ifcreate A

specifies that the target should be rebuilt when the non-existent file A appears or is deleted.

#ENVIRONMENT VARIABLES

The -verbose variable can be set with the environment variable `REDO_VERBOSE`.
The value of the variable is is not relevant, but its length corresponds to the
intensity of verbosity. For example, `REDO_VERBOSE=xx` is comparable
to invoking redo with the arguments '-verbose -verbose'.

The -debug option can be set with the environment variable `REDO_DEBUG`.
The value is not relevant, merely it's presence. `REDO_DEBUG=true` works fine.

The `REDO_TMP_DIR` environment variable, which does not have a corresponding flag, can be set
to control where redo creates temporary output files. The specified directory must exist and be writable
to the redo process. This may be useful if /tmp is mounted on a fast device such as a ram disk
or solid state drive (SSD).
